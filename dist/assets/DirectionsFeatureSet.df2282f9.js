import{e,y as t,z as r,b as s,i as o,l as a,X as n,A as p,bk as i,cz as l,e_ as m}from"./vendor.1ee57f36.js";let u=class extends a{constructor(e){super(e),this.extent=null,this.features=null,this.geometryType="polyline",this.routeId=null,this.routeName=null,this.totalDriveTime=null,this.totalLength=null,this.totalTime=null}readFeatures(e,t){(e||[]).forEach((e=>{this._decompressFeatureGeometry(e,t.summary.envelope.spatialReference)}));const r=n.fromJSON(t.spatialReference);return e.map((e=>{const t=p.fromJSON(e),s=e.geometry&&e.geometry.spatialReference;return t.geometry&&!s&&(i(t.geometry).spatialReference=r),t.strings=e.strings,t.events=(e.events||[]).map((t=>{const r=new p({geometry:new l({x:t.point.x,y:t.point.y,z:t.point.z,hasZ:void 0!==t.point.z,spatialReference:e.geometry&&e.geometry.spatialReference}),attributes:{ETA:t.ETA,arriveTimeUTC:t.arriveTimeUTC}});return r.strings=t.strings,r})),t}))}get mergedGeometry(){if(!this.features)return null;const e=this.features.map((({geometry:e})=>i(e))),t=this.get("extent.spatialReference");return this._mergePolylinesToSinglePath(e,t)}get strings(){return this.features.map((({strings:e})=>e))}_decompressFeatureGeometry(e,t){e.geometry=this._decompressGeometry(e.compressedGeometry,t)}_decompressGeometry(e,t){let r=0,s=0,o=0,a=0;const n=[];let p,i,l,m,u,y,c,h,d=0,g=0,f=0;if(u=e.match(/((\+|\-)[^\+\-\|]+|\|)/g),u||(u=[]),0===parseInt(u[d],32)){d=2;const e=parseInt(u[d],32);d++,y=parseInt(u[d],32),d++,1&e&&(g=u.indexOf("|")+1,c=parseInt(u[g],32),g++),2&e&&(f=u.indexOf("|",g)+1,h=parseInt(u[f],32),f++)}else y=parseInt(u[d],32),d++;for(;d<u.length&&"|"!==u[d];){p=parseInt(u[d],32)+r,d++,r=p,i=parseInt(u[d],32)+s,d++,s=i;const e=[p/y,i/y];g&&(m=parseInt(u[g],32)+o,g++,o=m,e.push(m/c)),f&&(l=parseInt(u[f],32)+a,f++,a=l,e.push(l/h)),n.push(e)}return{paths:[n],hasZ:g>0,hasM:f>0,spatialReference:t}}_mergePolylinesToSinglePath(e,t){let r=[];(e||[]).forEach((e=>{e.paths.forEach((e=>{r=r.concat(e)}))}));const s=[];let o=[0,0];return r.forEach((e=>{e[0]===o[0]&&e[1]===o[1]||(s.push(e),o=e)})),new m({paths:[s]},t)}};e([t({type:r,json:{read:{source:"summary.envelope"}}})],u.prototype,"extent",void 0),e([t()],u.prototype,"features",void 0),e([s("features")],u.prototype,"readFeatures",null),e([t()],u.prototype,"geometryType",void 0),e([t({readOnly:!0,dependsOn:["features","extent.spatialReference"]})],u.prototype,"mergedGeometry",null),e([t()],u.prototype,"routeId",void 0),e([t()],u.prototype,"routeName",void 0),e([t({value:null,readOnly:!0,dependsOn:["features"]})],u.prototype,"strings",null),e([t({json:{read:{source:"summary.totalDriveTime"}}})],u.prototype,"totalDriveTime",void 0),e([t({json:{read:{source:"summary.totalLength"}}})],u.prototype,"totalLength",void 0),e([t({json:{read:{source:"summary.totalTime"}}})],u.prototype,"totalTime",void 0),u=e([o("esri.tasks.support.DirectionsFeatureSet")],u);var y=u;export{y as c};
