var e=Object.defineProperty,r=Object.prototype.hasOwnProperty,t=Object.getOwnPropertySymbols,i=Object.prototype.propertyIsEnumerable,s=(r,t,i)=>t in r?e(r,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):r[t]=i,o=(e,o)=>{for(var a in o||(o={}))r.call(o,a)&&s(e,a,o[a]);if(t)for(var a of t(o))i.call(o,a)&&s(e,a,o[a]);return e};import{e as a,y as n,cz as l,b as p,e_ as u,x as c,A as y,i as f,a as d,l as m,X as h,k as B,eI as g,U as b,ai as v,fg as O}from"./vendor.1ee57f36.js";import{c as P,n as A,e as S}from"./NAMessage.d2825902.js";import{c as R}from"./DirectionsFeatureSet.df2282f9.js";import"./GPMessage.9782015f.js";function j(e){return m.fromJSON(e).features.map((e=>e.geometry))}let G=class extends d{constructor(e){super(e),this.directions=null,this.facilities=null,this.incidents=null,this.messages=null,this.pointBarriers=null,this.polylineBarriers=null,this.polygonBarriers=null,this.routes=null}readFacilities(e){return j(e)}readIncidents(e){return j(e)}readPointBarriers(e,r){return j(r.barriers)}readPolylineBarriers(e){return j(e)}readPolygonBarriers(e){return j(e)}readRoutes(e){return(r=e).features.map((e=>{const t=h.fromJSON(r.spatialReference),i=y.fromJSON(e);return B(i.geometry)&&(i.geometry.spatialReference=t),i}));var r}};a([n({type:[R]})],G.prototype,"directions",void 0),a([n({type:[l]})],G.prototype,"facilities",void 0),a([p("facilities")],G.prototype,"readFacilities",null),a([n({type:[l]})],G.prototype,"incidents",void 0),a([p("incidents")],G.prototype,"readIncidents",null),a([n({type:[P]})],G.prototype,"messages",void 0),a([n({type:[l]})],G.prototype,"pointBarriers",void 0),a([p("pointBarriers",["barriers"])],G.prototype,"readPointBarriers",null),a([n({type:[u]})],G.prototype,"polylineBarriers",void 0),a([p("polylineBarriers")],G.prototype,"readPolylineBarriers",null),a([n({type:[c]})],G.prototype,"polygonBarriers",void 0),a([p("polygonBarriers")],G.prototype,"readPolygonBarriers",null),a([n({type:[y]})],G.prototype,"routes",void 0),a([p("routes")],G.prototype,"readRoutes",null),G=a([f("esri.tasks.support.ClosestFacilitySolveResult")],G);var N=G;const _=S({accumulateAttributes:{name:"accumulateAttributeNames"},attributeParameterValues:!0,directionsTimeAttribute:{name:"directionsTimeAttributeName"},impedanceAttribute:{name:"impedanceAttributeName"},facilities:!0,incidents:!0,outSpatialReference:{name:"outSR",getter:e=>e.outSpatialReference.wkid},pointBarriers:{name:"barriers"},polylineBarriers:!0,polygonBarriers:!0,restrictionAttributes:{name:"restrictionAttributeNames"},returnPointBarriers:{name:"returnBarriers"},returnRoutes:{name:"returnCFRoutes"},travelMode:!0});let k=class extends(A(O)){constructor(e){super(e),this.url=null}solve(e,r){const t=[],i=[],s={},a={};return e.incidents&&e.incidents.features&&this._collectGeometries(e.incidents.features,i,"incidents.features",s),e.facilities&&e.facilities.features&&this._collectGeometries(e.facilities.features,i,"facilities.features",s),e.pointBarriers&&e.pointBarriers.features&&this._collectGeometries(e.pointBarriers.features,i,"pointBarriers.features",s),e.polylineBarriers&&e.polylineBarriers.features&&this._collectGeometries(e.polylineBarriers.features,i,"polylineBarriers.features",s),e.polygonBarriers&&e.polygonBarriers.features&&this._collectGeometries(e.polygonBarriers.features,i,"polygonBarriers.features",s),g(i).then((e=>{for(const r in s){const i=s[r];t.push(r),a[r]=e.slice(i[0],i[1])}return this._isInputGeometryZAware(a,t)?this.getServiceDescription():b({dontCheck:!0})})).then((i=>{("dontCheck"in i?i.dontCheck:i.hasZ)||this._dropZValuesOffInputGeometry(a,t);for(const r in a)a[r].forEach(((t,i)=>{e.get(r)[i].geometry=t}));let s={query:o(o(o({},this.parsedUrl.query),{f:"json"}),_.toQueryParams(e))};return(this.requestOptions||r)&&(s=o(o(o({},this.requestOptions),r),s)),v(`${this.parsedUrl.path}/solveClosestFacility`,s)})).then((e=>N.fromJSON(e.data)))}_collectGeometries(e,r,t,i){i[t]=[r.length,r.length+e.length],e.forEach((e=>{r.push(e.geometry)}))}};a([n()],k.prototype,"url",void 0),k=a([f("esri.tasks.ClosestFacilityTask")],k);var C=k;export default C;
