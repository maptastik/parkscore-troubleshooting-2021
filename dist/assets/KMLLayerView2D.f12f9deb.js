import{W as e,g4 as i,E as t,U as s,aZ as a,ai as o,z as l,dr as n,eT as r,g5 as h,c0 as p,g6 as d,e as m,y as c,i as y}from"./vendor.1ee57f36.js";import{g,d as _,h as w}from"./kmlUtils.63ff9791.js";import{l as u,p as b}from"./LayerView2D.5b971eca.js";import{Q as V}from"./GraphicsView2D.5ff45ce2.js";import{c as f}from"./Bitmap.979d0e7e.js";import{t as v}from"./BitmapContainer.5579ad62.js";import"./aaBoundingBox.960884d4.js";import"./Container.c19388ee.js";import"./mat4f32.65c405e6.js";import"./rbush.d43ba1fa.js";import"./json.9d10e1a3.js";import"./quickselect.53c6798b.js";import"./shapingUtils.66b0bc31.js";import"./BidiEngine.39026c84.js";import"./MD5.89293f8b.js";import"./Utils.88967ee0.js";import"./MaterialKey.464cac5a.js";import"./visualVariablesUtils.dc4022b6.js";import"./Rect.8611b8cd.js";import"./WGLMeshFactory.b3d89ebf.js";import"./index.4894e768.js";import"./cimAnalyzer.a961a551.js";import"./quantizationUtils.66d2dc60.js";import"./CIMSymbolHelper.2ecfa4b9.js";import"./VertexBuffer.19222be6.js";import"./CircularArray.1d7faf48.js";import"./TurboLine.6302d753.js";import"./GeometryUtils.4f6b8486.js";import"./FeatureContainer.e42ac772.js";import"./TileContainer.7d423330.js";import"./WGLContainer.df898e6a.js";import"./ShaderCompiler.00c23a07.js";import"./Program.76c009ec.js";import"./earcut.4e65dd4c.js";import"./ComputedAttributeStorage.637c93e6.js";import"./FeatureSetReader.3ec5c3db.js";import"./centroid.b04b550b.js";import"./graphicsUtils.0fbe3e39.js";let j=class extends(u(b)){constructor(){super(...arguments),this._handles=new e,this._bitmapIndex=new Map,this._mapImageContainer=new v,this._featuresMap=new Map,this.allVisiblePoints=new i,this.allVisiblePolylines=new i,this.allVisiblePolygons=new i,this.allVisibleMapImages=new t}hitTest(e,i){if(this.suspended||!this._pointsView&&!this._polylinesView&&!this._polygonsView)return s(null);const t=[this._pointsView.hitTest(e,i),this._polylinesView.hitTest(e,i),this._polygonsView.hitTest(e,i)];return a(t).then((e=>e.filter((e=>(e&&(e.layer=this.layer,e.sourceLayer=this.layer),!!e)))[0]||null))}update(e){this._polygonsView&&this._polygonsView.processUpdate(e),this._polylinesView&&this._polylinesView.processUpdate(e),this._pointsView&&this._pointsView.processUpdate(e)}attach(){this._handles.add([this.allVisibleMapImages.on("change",(e=>{e.added.forEach((e=>this._addMapImage(e))),e.removed.forEach((e=>this._removeMapImage(e)))}))]),this.container.addChild(this._mapImageContainer),this._polygonsView=new V({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate()}),this.container.addChild(this._polygonsView.container),this._polylinesView=new V({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate()}),this.container.addChild(this._polylinesView.container),this._pointsView=new V({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate()}),this.container.addChild(this._pointsView.container),this.watch("layer.visibleSublayers",(()=>this._refreshCollections())),this._fetchingPromise=this._fetchService().then((()=>{this._fetchingPromise=null,this.notifyChange("updating")}))}detach(){this._handles.removeAll(),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView&&(this._polygonsView.destroy(),this._polygonsView=null),this._polylinesView&&(this._polylinesView.destroy(),this._polylinesView=null),this._pointsView&&(this._pointsView.destroy(),this._pointsView=null)}moveStart(){}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return null!=this._fetchingPromise||this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(e){(this.view.spatialReference.isWGS84||this.view.spatialReference.isWebMercator)&&o(e.href,{responseType:"image"}).then((({data:i})=>{let t=l.fromJSON(e.extent);n(t,this.view.spatialReference)&&(t=r(t,this.view.spatialReference));const s=new f(i);s.x=t.xmin,s.y=t.ymax,s.resolution=t.width/i.naturalWidth,s.rotation=e.rotation,this._mapImageContainer.addChild(s),this._bitmapIndex.set(e,s)}))}_fetchService(){return this._handles.remove("refresh-collections"),this._getParsedKML().then((e=>this._fetchSublayerService(this.layer,e)))}_fetchSublayerService(e,i){const t=e.sublayers;if(!t||0===t.length)return s();const o=[];return t.forEach((e=>{const t=h(e,"visible").then((()=>e.load())).then((()=>this._getGraphicsForSublayer(e,i))).then((i=>p((t=>{e.networkLink?t():(this._featuresMap.set(e,i),this._handles.add(d((()=>{this._refreshCollections(),t()})),"refresh-collections"))})))).then((()=>this._fetchSublayerService(e,e.sourceJSON||i)));e.visible&&o.push(t)})),a(o).then((()=>{}))}_getParsedKML(){return g(this.layer.url,this.view.spatialReference,this.layer.refreshInterval).then((e=>_(e.data)))}async _getGraphicsForSublayer(e,i){let t=null;return i.sublayers.some((i=>(t=i,i.id===e.id)))?{points:t.points&&await w(t.points),polylines:t.polylines&&await w(t.polylines),polygons:t.polygons&&await w(t.polygons),mapImages:t.mapImages}:null}_refreshCollections(){const e=this.get("layer.visibleSublayers");this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),e&&e.length&&e.forEach((e=>{const i=this._featuresMap.get(e);i&&(this.allVisiblePoints.addMany(i.points),this.allVisiblePolylines.addMany(i.polylines),this.allVisiblePolygons.addMany(i.polygons),this.allVisibleMapImages.addMany(i.mapImages))}))}_removeMapImage(e){const i=this._bitmapIndex.get(e);i&&(this._mapImageContainer.removeChild(i),this._bitmapIndex.delete(e))}};m([c()],j.prototype,"_pointsView",void 0),m([c()],j.prototype,"_polylinesView",void 0),m([c()],j.prototype,"_polygonsView",void 0),m([c()],j.prototype,"_fetchingPromise",void 0),m([c({dependsOn:["_fetchingPromise","_pointsView.updating","_polygonsView.updating","_polylinesView.updating"]})],j.prototype,"updating",void 0),j=m([y("esri.views.2d.layers.KMLLayerView2D")],j);var C=j;export default C;
