import{k as e,A as i,E as t,e as r,i as s}from"./vendor.1ee57f36.js";import{l as a,p as o}from"./LayerView2D.5b971eca.js";import{Q as p}from"./GraphicsView2D.5ff45ce2.js";import"./Container.c19388ee.js";import"./mat4f32.65c405e6.js";import"./rbush.d43ba1fa.js";import"./json.9d10e1a3.js";import"./quickselect.53c6798b.js";import"./shapingUtils.66b0bc31.js";import"./BidiEngine.39026c84.js";import"./MD5.89293f8b.js";import"./Utils.88967ee0.js";import"./MaterialKey.464cac5a.js";import"./visualVariablesUtils.dc4022b6.js";import"./Rect.8611b8cd.js";import"./WGLMeshFactory.b3d89ebf.js";import"./index.4894e768.js";import"./cimAnalyzer.a961a551.js";import"./quantizationUtils.66d2dc60.js";import"./CIMSymbolHelper.2ecfa4b9.js";import"./VertexBuffer.19222be6.js";import"./CircularArray.1d7faf48.js";import"./TurboLine.6302d753.js";import"./GeometryUtils.4f6b8486.js";import"./FeatureContainer.e42ac772.js";import"./TileContainer.7d423330.js";import"./WGLContainer.df898e6a.js";import"./ShaderCompiler.00c23a07.js";import"./Program.76c009ec.js";import"./earcut.4e65dd4c.js";import"./ComputedAttributeStorage.637c93e6.js";import"./FeatureSetReader.3ec5c3db.js";import"./centroid.b04b550b.js";import"./graphicsUtils.0fbe3e39.js";const n=Object.freeze({remove(){},pause(){},resume(){}});let l=class extends(a(o)){async fetchPopupFeatures(e){return(await Promise.all(Array.from(this.graphicsViews(),(i=>i.searchFeatures(e).then((e=>e.filter((e=>!!e.popupTemplate)))))))).flat()}*graphicsViews(){e(this._graphicsViewsFeatureCollectionMap)?yield*this._graphicsViewsFeatureCollectionMap.keys():e(this._graphicsViews)?yield*this._graphicsViews:yield*[]}async hitTest(i,t){if(this.suspended)return null;const r=Array.from(this.graphicsViews(),(async r=>{const s=await r.hitTest(i,t);if(s){if(s.layer=this.layer,s.sourceLayer=this.layer,e(this._graphicsViewsFeatureCollectionMap)){const e=this._graphicsViewsFeatureCollectionMap.get(r);!s.popupTemplate&&e.popupTemplate&&(s.popupTemplate=e.popupTemplate)}return s}return null}));return(await Promise.all(r)).filter((e=>!!e))[0]||null}highlight(e){let r;if("number"==typeof e?r=[e]:e instanceof i?r=[e.uid]:Array.isArray(e)&&e.length>0?r="number"==typeof e[0]?e:e.map((e=>e&&e.uid)):t.isCollection(e)&&(r=e.map((e=>e&&e.uid)).toArray()),r=r.filter((e=>null!=e)),!r.length)return n;for(const i of this.graphicsViews())i.addHighlight(r);return{remove:()=>{for(const e of this.graphicsViews())e.removeHighlight(r)}}}update(e){for(const i of this.graphicsViews())i.processUpdate(e)}attach(){var e;const i=this.view,t=()=>this.requestUpdate(),r=()=>this.notifyChange("updating");if(null!=(e=this.layer.featureCollections)&&e.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const e of this.layer.featureCollections){const s=new p({view:i,graphics:e.source,renderer:e.renderer,requestUpdateCallback:t});this._graphicsViewsFeatureCollectionMap.set(s,e),this.container.addChild(s.container),this.handles.add(s.watch("updating",r),"layerview-updating")}}else{const e=[this.layer.polygonGraphics,this.layer.lineGraphics,this.layer.pointGraphics,this.layer.textGraphics].map((e=>new p({view:i,graphics:e,requestUpdateCallback:t})));for(const i of e)this.handles.add(i.watch("updating",r),"layerview-updating"),this.container.addChild(i.container);this._graphicsViews=e}}detach(){this.container.removeAllChildren(),this.handles.remove("layerview-updating");for(const e of this.graphicsViews())e.destroy(),e.view=null,e.renderer=null;this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews())e.viewChange()}isUpdating(){for(const e of this.graphicsViews())if(e.updating)return!0;return!1}};l=r([s("esri.views.2d.layers.MapNotesLayerView2D")],l);var c=l;export default c;
