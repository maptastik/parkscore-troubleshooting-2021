import{e,i as t,m as r,ai as s,fb as o,a0 as a,k as i,fg as n,H as l,y as u}from"./vendor.1ee57f36.js";import{a as d}from"./GPMessage.9782015f.js";class c{constructor(e={}){this._options=e}toQueryParams(e){if(!e)return null;const t=e.toJSON(),r={};return Object.keys(t).forEach((e=>{const s=this._options[e];if(s){const o="boolean"!=typeof s&&s.name?s.name:e,a="boolean"!=typeof s&&s.getter?s.getter(t):t[e];null!=a&&(r[o]=(e=>{if(!Array.isArray(e))return!1;const[t]=e;return"number"==typeof t||"string"==typeof t})(a)?a.join(","):"object"==typeof a?JSON.stringify(a):a)}else r[e]=t[e]}),this),r}}function p(e){return new c(e)}const f=n=>{let l=class extends n{async getServiceDescription(){return this._serviceDescriptionPromise||(this._serviceDescriptionPromise=this._fetchServiceDescription()),this._serviceDescriptionPromise}async _fetchServiceDescription(){if(!this.url||!this.parsedUrl)throw new r("network-service:missing-url","Url to Network service is missing");const e=this.url,{data:t}=await s(e,{query:{f:"json"}});t.supportedTravelModes||(t.supportedTravelModes=[]);for(let r=0;r<t.supportedTravelModes.length;r++)t.supportedTravelModes[r].id||(t.supportedTravelModes[r].id=t.supportedTravelModes[r].itemId);const i=t.currentVersion>=10.4?async function(e){try{const{data:{supportedTravelModes:t,defaultTravelMode:r}}=await s(e+("/"===e[e.length-1]?"":"/")+"retrieveTravelModes",{query:{f:"json"}});return{supportedTravelModes:t,defaultTravelMode:r}}catch(t){throw new r("network-service:retrieveTravelModes","Could not get to the NAServer's retrieveTravelModes.",{error:t})}}(e):async function(e){const{data:t}=await s(e.substring(0,e.indexOf("/rest/")+6)+"info",{query:{f:"json"}});if(!t||!t.owningSystemUrl)return{supportedTravelModes:[],defaultTravelMode:null};e=t.owningSystemUrl;const{data:r}=await s(e+("/"===e[e.length-1]?"":"/")+"sharing/rest/portals/self",{query:{f:"json"}}),i=o("helperServices.routingUtilities.url",r);if(!i)return{supportedTravelModes:[],defaultTravelMode:null};const n=a(e),l=/\/solveClosestFacility$/.test(n.path)?"Route":/\/solveClosestFacility$/.test(n.path)?"ClosestFacility":"ServiceAreas",u=await s(i+("/"===i[i.length-1]?"":"/")+"GetTravelModes/execute",{query:{f:"json",serviceName:l}}),d=[];let c=null;if(u&&u.data&&u.data.results&&u.data.results.length){const e=u.data.results;for(const t of e)if("supportedTravelModes"===t.paramName){if(t.value&&t.value.features)for(const{attributes:e}of t.value.features)if(e){const t=JSON.parse(e.TravelMode);d.push(t)}}else"defaultTravelMode"===t.paramName&&(c=t.value)}return{supportedTravelModes:d,defaultTravelMode:c}}(e),{defaultTravelMode:n,supportedTravelModes:l}=await i;return t.defaultTravelMode=n,t.supportedTravelModes=l,t}_isInputGeometryZAware(e,t){for(let r=0;r<t.length;r++){const s=e[t[r]];if(s&&s.length)for(const e of s)if(i(e)&&e.hasZ)return!0}return!1}_dropZValuesOffInputGeometry(e,t){for(let r=0;r<t.length;r++){const s=e[t[r]];if(s&&s.length)for(const e of s)e.z=void 0}console.log("The remote Network Analysis service is powered by a network dataset which is not Z-aware.\nZ-coordinates of the input geometry are ignored.")}};return l=e([t("esri.tasks.mixins.NAServiceDescription")],l),l};let v=class extends(f(n)){};v=e([t("esri.tasks.mixins.NAServiceDescription")],v);const h=new l({0:"informative",1:"process-definition",2:"process-start",3:"process-stop",50:"warning",100:"error",101:"empty",200:"abort"});let y=class extends d{constructor(e){super(e),this.type=null}};e([u({type:String,json:{read:h.read,write:h.write}})],y.prototype,"type",void 0),y=e([t("esri.tasks.support.NAMessage")],y);var g=y;export{g as c,p as e,f as n};
