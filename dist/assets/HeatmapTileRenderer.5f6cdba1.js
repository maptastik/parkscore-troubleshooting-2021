import{e,i as t,U as i}from"./vendor.1ee57f36.js";import{a as n,r as s}from"./heatmapUtils.ed60c52c.js";import{o as r}from"./BitmapTileContainer.407aeb73.js";import{o as a}from"./BaseTileRenderer.c672c923.js";import"./Utils.88967ee0.js";import"./WGLContainer.df898e6a.js";import"./Container.c19388ee.js";import"./mat4f32.65c405e6.js";import"./ShaderCompiler.00c23a07.js";import"./Program.76c009ec.js";import"./GeometryUtils.4f6b8486.js";import"./MaterialKey.464cac5a.js";import"./earcut.4e65dd4c.js";import"./TileContainer.7d423330.js";import"./Bitmap.979d0e7e.js";class o{constructor(){this.gradient=null,this.height=512,this.width=512}render(e){n(e,512,this.intensities,this.gradient,this.minPixelIntensity,this.maxPixelIntensity)}}let l=class extends a{constructor(e){super(e),this._intensityInfo={minPixelIntensity:0,maxPixelIntensity:0},this.featuresView={attributeView:{initialize:()=>{},requestUpdate:()=>{}},requestRender:()=>{}},this._container=new r(e.tileInfoView)}createTile(e){const t=this._container.createTile(e);return this.tileInfoView.getTileCoords(t.bitmap,e),t.bitmap.resolution=this.tileInfoView.getTileResolution(e),t}onConfigUpdate(){const e=this.layer.renderer;if("heatmap"===e.type){const{minPixelIntensity:t,maxPixelIntensity:i}=e;this._intensityInfo.minPixelIntensity=t,this._intensityInfo.maxPixelIntensity=i,this._gradient=s(e.toJSON()),this.tiles.forEach((e=>{const n=e.bitmap.source;n&&(n.minPixelIntensity=t,n.maxPixelIntensity=i,n.gradient=this._gradient,e.bitmap.invalidateTexture())}))}}hitTest(){return i([])}install(e){e.addChild(this._container)}uninstall(e){this._container.removeAllChildren(),e.removeChild(this._container)}disposeTile(e){this._container.removeChild(e),e.destroy()}supportsRenderer(e){return e&&"heatmap"===e.type}onTileData(e){const t=this.tiles.get(e.tileKey);if(!t)return;const i=e.intensityInfo,{minPixelIntensity:n,maxPixelIntensity:s}=this._intensityInfo,r=t.bitmap.source||new o;r.intensities=i&&i.matrix||null,r.minPixelIntensity=n,r.maxPixelIntensity=s,r.gradient=this._gradient,t.bitmap.source=r,this._container.addChild(t),this.requestUpdate()}onTileError(e){console.error(e)}lockGPUUploads(){}unlockGPUUploads(){}};l=e([t("esri.views.2d.layers.features.tileRenderers.HeatmapTileRenderer")],l);var m=l;export default m;
